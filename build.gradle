buildscript {
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE"
    }
}

plugins {
    id 'application'
    id 'io.spring.dependency-management' version '1.0.4.RELEASE'
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'org.owasp.dependencycheck' version '5.2.4'
    id 'com.github.ben-manes.versions' version '0.27.0'
    id 'org.sonarqube' version '2.8'
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id "net.ltgt.apt" version "0.21"
    id 'jacoco'
    id 'org.liquibase.gradle' version '2.0.2'
   // id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.0.11"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'idea'

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-openfeign:2.1.3.RELEASE'
    }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+$/
  return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}

if (!project.hasProperty('runList')) {
    project.ext.runList = 'main'
}

configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group in ['com.fasterxml.jackson.core', 'com.fasterxml.jackson.module', 'com.fasterxml.jackson.datatype']) {
                details.useVersion '2.10.0'
            }
        }
    }
}

//loading properties file.
Properties liquibaseProps = new Properties()
liquibaseProps.load(new FileInputStream("$projectDir/src/main/resources/liquibase.properties"))

project.ext.diffChangelogFile = 'src/main/resources/db/changelog/' + new Date().format('yyyyMMddHHmmss') + '_changelog.xml'

liquibase {
    activities {
        main {
            driver liquibaseProps.getProperty('driver')
            url project.hasProperty("dburl") ? "jdbc:postgresql://$dburl" : liquibaseProps.getProperty('url')
            username project.hasProperty("flyway.user") ? "${rootProject.properties['flyway.user']}" : liquibaseProps.getProperty('username')
            password project.hasProperty("flyway.password") ? "${rootProject.properties['flyway.password']}" : liquibaseProps.getProperty('password')
            changeLogFile liquibaseProps.getProperty('changeLogFile')
            referenceUrl liquibaseProps.getProperty('referenceUrl')
            defaultSchemaName ''
            logLevel 'debug'
            classpath 'src/main/resources/'
        }
        diffLog {
            driver liquibaseProps.getProperty('driver')
            url project.hasProperty("dburl") ? "jdbc:postgresql://$dburl" : liquibaseProps.getProperty('url')
            username project.hasProperty("flyway.user") ? "${rootProject.properties['flyway.user']}" : liquibaseProps.getProperty('username')
            password project.hasProperty("flyway.password") ? "${rootProject.properties['flyway.password']}" : liquibaseProps.getProperty('password')
            referenceUrl liquibaseProps.getProperty('referenceUrl')
            defaultSchemaName ''
            logLevel 'debug'
            classpath 'src/main/resources/'
        }
    }

    runList = project.ext.runList
}

group 'uk.gov.hmcts.reform.em.npa'
version '0.0.1'
sourceCompatibility = 1.8
mainClassName = 'uk.gov.hmcts.reform.em.npa.Application'

configurations {
    aatCompile.extendsFrom(testCompile)
    aatRuntime.extendsFrom(testRuntime)
}

repositories {
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    jcenter()
    mavenLocal()
    maven {
        url 'https://repo.spring.io/libs-snapshot'
    }
}

dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

def versions = [
        postgresql         : '42.2.8',
        springBoot         : '2.0.5.RELEASE',
        springfoxSwagger   : '2.9.2',
        h2                 : '1.4.199',
        liquibase          : '3.8.0',
]

dependencies {
    compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.19'
    compile 'com.squareup.okhttp3:okhttp:4.2.1'
    compile("org.springframework.boot:spring-boot-starter-batch")
    compile "com.fasterxml.jackson.datatype:jackson-datatype-json-org"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    compile "com.fasterxml.jackson.core:jackson-annotations"
    compile "com.fasterxml.jackson.core:jackson-databind"
    compile "com.fasterxml.jackson.core:jackson-core"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner"
    compile "org.zalando:problem-spring-web:0.25.2"
    compile("io.springfox:springfox-swagger2:${versions.springfoxSwagger}")
    compile("io.springfox:springfox-swagger-ui:${versions.springfoxSwagger}")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile ("org.springframework.boot:spring-boot-starter-security")
    compile( 'org.apache.httpcomponents:httpclient:4.5.10')
    compile "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibase_hibernate5_version}"
    liquibaseRuntime sourceSets.main.compileClasspath
    liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.0.1'
    liquibaseRuntime "org.postgresql:postgresql"
    compile("org.postgresql:postgresql:${versions.postgresql}")
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    compile group: 'commons-validator', name: 'commons-validator', version: '1.6'
    compile "javax.transaction:javax.transaction-api"
    compile group: 'org.ehcache', name: 'ehcache', version: '3.7.1'
    compile "org.hibernate:hibernate-core"
    compile "com.zaxxer:HikariCP"
    compile "org.hibernate:hibernate-jcache"
    compile "org.hibernate:hibernate-entitymanager"
    compile "org.hibernate:hibernate-envers"
    compile "org.hibernate.validator:hibernate-validator"
    compile group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.4'
    compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.1'

    compile 'org.springframework.cloud:spring-cloud-starter-openfeign'

    compile "org.hibernate.validator:hibernate-validator"
    compile "org.mapstruct:mapstruct-jdk8:${mapstruct_version}"
    compile "org.springframework.boot:spring-boot-starter-oauth2-client"
    compile "org.springframework.security:spring-security-oauth2-resource-server"
    compile "org.springframework.security:spring-security-oauth2-jose:5.2.2.RELEASE"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen"
    annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile group: 'junit', name: 'junit', version: '4.13'
    testCompile group: 'com.h2database', name: 'h2', version: '1.4.200'
    testCompile 'com.github.gmazzo:okhttp-mock:1.3.2'
    testCompile 'io.rest-assured:rest-assured:3.2.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    liquibaseRuntime "com.h2database:h2"
    compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: '5.1.1'
    compile group: 'uk.gov.hmcts.reform', name: 'logging', version: '5.1.1'
    compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: '0.0.5'
    compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version:'0.0.4'
    compile group: 'org.springframework.security', name: 'spring-security-oauth2-core', version: '5.3.0.RELEASE'

    aatCompile "uk.gov.hmcts.reform:em-test-helper:1.17.1"
}

bootJar {
    baseName 'rpa-native-pdf-annotator-app'
    archiveName = "$baseName"+".jar"
    destinationDir = file("$rootDir/build/libs")
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

def coverageExclusionList = [
    '**uk/gov/hmcts/reform/em/npa/Application*',
    '**uk/gov/hmcts/reform/em/npa/appinsights/*',
    '**uk/gov/hmcts/reform/em/npa/config/*',
    '**uk/gov/hmcts/reform/em/npa/config/logging/*',
    '**uk/gov/hmcts/reform/em/npa/domain/*',
    '**uk/gov/hmcts/reform/em/npa/service/dto/external/annotation/*',
    '**uk/gov/hmcts/reform/em/npa/config/security/*'
]

//(jacocoTestReport | jacocoTestCoverageVerification)
jacoco {
    toolVersion = '0.7.9' // jacocoMavenPluginVersion
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        csv.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: coverageExclusionList)
        })
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "${rootProject.name}"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.exclusions", coverageExclusionList.join(", ")
    }
}

sourceSets {
    aat {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir('src/aat/java')
        }
        resources {
            srcDir('src/aat/resources')
        }
    }
}

task functional(type: Test) {
    group = 'Delivery pipeline'
    description = 'Executes functional tests'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/reform/em/npa/functional/**"

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
    group = 'Delivery pipeline'
    description = 'Executes non-destructive smoke tests'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/reform/em/npa/smoke/**"

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task migratePostgresDatabase(dependsOn: 'liquibaseUpdate')

dependencyCheck {
    suppressionFile = 'dependency-check-suppressions.xml'
}

compileJava.dependsOn processResources
